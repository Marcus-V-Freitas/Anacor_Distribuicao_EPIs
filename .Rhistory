pacotes <- c("plotly","tidyverse","ggrepel","knitr","kableExtra","FactoMineR")
for (i in pacotes){
if(! i %in% installed.packages()){
install.packages(i, dependencies = TRUE)
}
library(i)
}
pacotes <- c("plotly","tidyverse","ggrepel","knitr","kableExtra","FactoMineR")
for (i in pacotes){
if(! i %in% installed.packages()){
install.packages(i, dependencies = TRUE)
}
print(i)
library(i)
}
for (i in pacotes){
if(! i %in% installed.packages()){
install.packages(i, dependencies = TRUE)
}
print(i)
require(i)
}
head(epis) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
font_size = 12)
pacotes <- c("plotly","tidyverse","ggrepel","knitr","kableExtra","FactoMineR")
for (i in pacotes){
if(! i %in% installed.packages()){
install.packages(i, dependencies = TRUE)
}
sapply(pacotes, require, character = T)
}
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
as.character(unique(unlist(epis[,c('status')])))
epis <- epis[,c('material','requisitante')]
summary(epis)
head(epis) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
font_size = 12)
tab <- table(epis$requisitante,
epis$material)
tab
qui2 <- chisq.test(tab,simulate.p.value = T)
qui2
# Mapa de calor dos resíduos padronizados ajustados
data.frame(qui2$stdres) %>%
rename(requisitante = 1,
material = 2) %>%
ggplot(aes(x = requisitante, y = material, fill = Freq, label = round(Freq,3))) +
geom_tile() +
geom_text(size = 3, angle = 90) +
scale_fill_gradient2(low = "#440154FF",
mid = "white",
high = "#FDE725FF",
midpoint = 0) +
labs(x = NULL, y = NULL) +
theme(legend.title = element_blank(),
panel.background = element_rect("white"),
legend.position = "none",
axis.text.x = element_text(angle = 90))
anacor <- CA(tab)
anacor$eig
ca_coordenadas <- rbind(anacor$row$coord, anacor$col$coord)
ca_coordenadas
id_var <- apply(epis,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
id_var
ca_coordenadas_final <- data.frame(ca_coordenadas,
variavel = rep(names(id_var), id_var))
ca_coordenadas_final
ca_coordenadas_final %>%
rownames_to_column() %>%
rename(categoria = 1) %>%
ggplot(aes(x = Dim.1,
y = Dim.2,
label = categoria,
color = variavel,
shape = variavel)) +
geom_point(size = 3) +
geom_label_repel() +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(x = paste("Dimensão 1:", paste0(round(anacor$eig[1,2], digits = 2), "%")),
y = paste("Dimensão 2:", paste0(round(anacor$eig[2,2], digits = 2), "%"))) +
scale_color_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
coordenadas_linhas <- anacor$row$coord
coordenadas_linhas
# Capturando as coordenadas das categorias da variável disposta em coluna
coordenadas_colunas <- anacor$col$coord
coordenadas_colunas
mapa_perceptual_3D <- plot_ly()
# Inserindo as coordenadas das categorias da variável disposta em linha
mapa_perceptual_3D <- add_trace(mapa_perceptual_3D,
x = coordenadas_linhas[,1],
y = coordenadas_linhas[,2],
z = coordenadas_linhas[,3],
mode = "text",
type="scatter3d",
text = rownames(coordenadas_linhas),
textfont = list(color = "#440154FF"),
showlegend = FALSE)
# Inserindo as coordenadas das categorias da variável disposta em coluna
mapa_perceptual_3D <- add_trace(mapa_perceptual_3D,
x = coordenadas_colunas[,1],
y = coordenadas_colunas[,2],
z = coordenadas_colunas[,3],
mode = "text",
type="scatter3d",
text = rownames(coordenadas_colunas),
textfont = list(color = "#287C8EFF"),
showlegend = FALSE)
# Inserindo o nome dos eixos (Dimensão 1, Dimensão 2 e Dimensão 3)
mapa_perceptual_3D <- layout(mapa_perceptual_3D,
scene = list(xaxis = list(title = colnames(coordenadas_linhas)[1]),
yaxis = list(title = colnames(coordenadas_linhas)[2]),
zaxis = list(title = colnames(coordenadas_linhas)[3]),
aspectmode = "data"),
margin = list(l = 0, r = 0, b = 0, t = 0))
mapa_perceptual_3D
pacotes <- c("plotly","tidyverse","ggrepel","knitr","kableExtra","FactoMineR")
#Verificar se pacote está instalado e carregar todos
for (i in pacotes){
if(! i %in% installed.packages()){
install.packages(i, dependencies = TRUE)
}
sapply(pacotes, require, character = T)
}
options(ggrepel.max.overlaps = Inf) #Permitir que mais rótulos sejam afastados
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
head(epis)
as.character(unique(unlist(epis[,c('status')])))
epis <- epis[,c('material','requisitante')]
summary(epis)
head(epis) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
font_size = 12)
tab <- table(epis$requisitante,
epis$material)
tab
qui2 <- chisq.test(tab,simulate.p.value = T)
qui2
# Mapa de calor dos resíduos padronizados ajustados
data.frame(qui2$stdres) %>%
rename(requisitante = 1,
material = 2) %>%
ggplot(aes(x = requisitante, y = material, fill = Freq, label = round(Freq,3))) +
geom_tile() +
geom_text(size = 3, angle = 90) +
scale_fill_gradient2(low = "#440154FF",
mid = "white",
high = "#FDE725FF",
midpoint = 0) +
labs(x = NULL, y = NULL) +
theme(legend.title = element_blank(),
panel.background = element_rect("white"),
legend.position = "none",
axis.text.x = element_text(angle = 90))
modelo <- CA(tab)
modelo$eig
coordenadas <- rbind(modelo$row$coord, modelo$col$coord)
coordenadas
id_var <- apply(epis,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
id_var
coordenadas_final <- data.frame(coordenadas,
variavel = rep(names(id_var), id_var))
coordenadas_final
coordenadas_final %>%
rownames_to_column() %>%
rename(categoria = 1) %>%
ggplot(aes(x = Dim.1,
y = Dim.2,
label = categoria,
color = variavel,
shape = variavel)) +
geom_point(size = 3) +
geom_label_repel() +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(x = paste("Dimensão 1:", paste0(round(modelo$eig[1,2], digits = 2), "%")),
y = paste("Dimensão 2:", paste0(round(modelo$eig[2,2], digits = 2), "%"))) +
scale_color_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
coordenadas_linhas <- modelo$row$coord
coordenadas_linhas
# Capturando as coordenadas das categorias da variável disposta em coluna
coordenadas_colunas <- modelo$col$coord
coordenadas_colunas
mapa_perceptual_3D <- plot_ly()
# Inserindo as coordenadas das categorias da variável disposta em linha
mapa_perceptual_3D <- add_trace(mapa_perceptual_3D,
x = coordenadas_linhas[,1],
y = coordenadas_linhas[,2],
z = coordenadas_linhas[,3],
mode = "text",
type="scatter3d",
text = rownames(coordenadas_linhas),
textfont = list(color = "#440154FF"),
showlegend = FALSE)
# Inserindo as coordenadas das categorias da variável disposta em coluna
mapa_perceptual_3D <- add_trace(mapa_perceptual_3D,
x = coordenadas_colunas[,1],
y = coordenadas_colunas[,2],
z = coordenadas_colunas[,3],
mode = "text",
type="scatter3d",
text = rownames(coordenadas_colunas),
textfont = list(color = "#287C8EFF"),
showlegend = FALSE)
# Inserindo o nome dos eixos (Dimensão 1, Dimensão 2 e Dimensão 3)
mapa_perceptual_3D <- layout(mapa_perceptual_3D,
scene = list(xaxis = list(title = colnames(coordenadas_linhas)[1]),
yaxis = list(title = colnames(coordenadas_linhas)[2]),
zaxis = list(title = colnames(coordenadas_linhas)[3]),
aspectmode = "data"),
margin = list(l = 0, r = 0, b = 0, t = 0))
mapa_perceptual_3D
pacotes <- c("plotly","tidyverse","ggrepel","knitr","kableExtra","FactoMineR")
#Verificar se pacote está instalado e carregar todos
for (i in pacotes){
if(! i %in% installed.packages()){
install.packages(i, dependencies = TRUE)
}
sapply(pacotes, require, character = T)
}
options(ggrepel.max.overlaps = Inf) #Permitir que mais rótulos sejam afastados
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
head(epis)
as.character(unique(unlist(epis[,c('status')])))
epis <- epis[,c('material','requisitante')]
summary(epis)
head(epis) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
font_size = 12)
tab <- table(epis$requisitante,
epis$material)
tab
qui2 <- chisq.test(tab,simulate.p.value = T)
qui2
# Mapa de calor dos resíduos padronizados ajustados
data.frame(qui2$stdres) %>%
rename(requisitante = 1,
material = 2) %>%
ggplot(aes(x = requisitante, y = material, fill = Freq, label = round(Freq,3))) +
geom_tile() +
geom_text(size = 3, angle = 90) +
scale_fill_gradient2(low = "#440154FF",
mid = "white",
high = "#FDE725FF",
midpoint = 0) +
labs(x = NULL, y = NULL) +
theme(legend.title = element_blank(),
panel.background = element_rect("white"),
legend.position = "none",
axis.text.x = element_text(angle = 90))
modelo <- CA(tab)
modelo$eig
coordenadas <- rbind(modelo$row$coord, modelo$col$coord)
coordenadas
variaveis <- apply(epis,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
variaveis
coordenadas_variaveis <- data.frame(coordenadas,
variavel = rep(names(variaveis), variaveis))
coordenadas_variaveis
coordenadas_variaveis %>%
rownames_to_column() %>%
rename(categoria = 1) %>%
ggplot(aes(x = Dim.1,
y = Dim.2,
label = categoria,
color = variavel,
shape = variavel)) +
geom_point(size = 3) +
geom_label_repel() +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(x = paste("Dimensão 1:", paste0(round(modelo$eig[1,2], digits = 2), "%")),
y = paste("Dimensão 2:", paste0(round(modelo$eig[2,2], digits = 2), "%"))) +
scale_color_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
coordenadas_linhas <- modelo$row$coord
coordenadas_linhas
# Capturando as coordenadas das categorias da variável disposta em coluna
coordenadas_colunas <- modelo$col$coord
coordenadas_colunas
mapa_perceptual_3D <- plot_ly()
# Inserindo as coordenadas das categorias da variável disposta em linha
mapa_perceptual_3D <- add_trace(mapa_perceptual_3D,
x = coordenadas_linhas[,1],
y = coordenadas_linhas[,2],
z = coordenadas_linhas[,3],
mode = "text",
type="scatter3d",
text = rownames(coordenadas_linhas),
textfont = list(color = "#440154FF"),
showlegend = FALSE)
# Inserindo as coordenadas das categorias da variável disposta em coluna
mapa_perceptual_3D <- add_trace(mapa_perceptual_3D,
x = coordenadas_colunas[,1],
y = coordenadas_colunas[,2],
z = coordenadas_colunas[,3],
mode = "text",
type="scatter3d",
text = rownames(coordenadas_colunas),
textfont = list(color = "#287C8EFF"),
showlegend = FALSE)
# Inserindo o nome dos eixos (Dimensão 1, Dimensão 2 e Dimensão 3)
mapa_perceptual_3D <- layout(mapa_perceptual_3D,
scene = list(xaxis = list(title = colnames(coordenadas_linhas)[1]),
yaxis = list(title = colnames(coordenadas_linhas)[2]),
zaxis = list(title = colnames(coordenadas_linhas)[3]),
aspectmode = "data"),
margin = list(l = 0, r = 0, b = 0, t = 0))
mapa_perceptual_3D
mapa_perceptual_3D
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
summary(epis)
tab <- table(epis$requisitante,
epis$material)
tab
head(epis) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
font_size = 12)
epis <- epis[,c('material','requisitante')]
summary(epis)
head(epis) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
font_size = 12)
tab <- table(epis$requisitante,
epis$material)
tab
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
epis$ <-
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
epis$ <-
summary(epis)
epis$n.pedido<- as.character(n.pedido)
epis$n.pedido<- as.character(epis$n.pedido)
summary(epis)
epis$quantidade <- as.numeric(epis$quantidade)
summary(epis)
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
epis$n.pedido <- as.character(epis$n.pedido)
epis$unidade  <- as.numeric(epis$unidade)
epis$quantidade <- as.numeric(epis$quantidade)
epis$material <- as.factor(epis$material)
epis$requisitante <- as.factor(epis$requisitante)
epis$status <- as.factor(epis$status)
summary(epis)
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
head(epis)
epis$data.saida <- as.Date(epis$data.saida)
summary(epis)
head(epis)
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
head(epis)
epis$data.saida <- as.Date.character(epis$data.saida,format = c("%d/%m/%Y"))
summary(epis)
head(epis)
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
head(epis)
pacotes <- c("plotly","tidyverse","ggrepel","knitr","kableExtra","FactoMineR")
#Verificar se pacote está instalado e carregar todos
for (i in pacotes){
if(! i %in% installed.packages()){
install.packages(i, dependencies = TRUE)
}
sapply(pacotes, require, character = T)
}
options(ggrepel.max.overlaps = Inf) #Permitir que mais rótulos sejam afastados
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
head(epis)
epis$n.pedido <- as.character(epis$n.pedido)
epis$unidade  <- as.numeric(epis$unidade)
epis$quantidade <- as.numeric(epis$quantidade)
epis$material <- as.factor(epis$material)
epis$requisitante <- as.factor(epis$requisitante)
epis$status <- as.factor(epis$status)
epis$data.saida <- as.Date.character(epis$data.saida,format = c("%d/%m/%Y"))
summary(epis)
as.character(unique(unlist(epis[,c('status')])))
epis <- epis[,c('material','requisitante')]
summary(epis)
head(epis) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
font_size = 12)
tab <- table(epis$requisitante,
epis$material)
tab
qui2 <- chisq.test(tab,simulate.p.value = T)
qui2
# Mapa de calor dos resíduos padronizados ajustados
data.frame(qui2$stdres) %>%
rename(requisitante = 1,
material = 2) %>%
ggplot(aes(x = requisitante, y = material, fill = Freq, label = round(Freq,3))) +
geom_tile() +
geom_text(size = 3, angle = 90) +
scale_fill_gradient2(low = "#440154FF",
mid = "white",
high = "#FDE725FF",
midpoint = 0) +
labs(x = NULL, y = NULL) +
theme(legend.title = element_blank(),
panel.background = element_rect("white"),
legend.position = "none",
axis.text.x = element_text(angle = 90))
modelo <- CA(tab)
modelo$eig
coordenadas <- rbind(modelo$row$coord, modelo$col$coord)
coordenadas
variaveis <- apply(epis,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
variaveis
coordenadas_variaveis <- data.frame(coordenadas,
variavel = rep(names(variaveis), variaveis))
coordenadas_variaveis
coordenadas_variaveis %>%
rownames_to_column() %>%
rename(categoria = 1) %>%
ggplot(aes(x = Dim.1,
y = Dim.2,
label = categoria,
color = variavel,
shape = variavel)) +
geom_point(size = 3) +
geom_label_repel() +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(x = paste("Dimensão 1:", paste0(round(modelo$eig[1,2], digits = 2), "%")),
y = paste("Dimensão 2:", paste0(round(modelo$eig[2,2], digits = 2), "%"))) +
scale_color_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
coordenadas_linhas <- modelo$row$coord
coordenadas_linhas
# Capturando as coordenadas das categorias da variável disposta em coluna
coordenadas_colunas <- modelo$col$coord
coordenadas_colunas
mapa_perceptual_3D <- plot_ly()
# Inserindo as coordenadas das categorias da variável disposta em linha
mapa_perceptual_3D <- add_trace(mapa_perceptual_3D,
x = coordenadas_linhas[,1],
y = coordenadas_linhas[,2],
z = coordenadas_linhas[,3],
mode = "text",
type="scatter3d",
text = rownames(coordenadas_linhas),
textfont = list(color = "#440154FF"),
showlegend = FALSE)
# Inserindo as coordenadas das categorias da variável disposta em coluna
mapa_perceptual_3D <- add_trace(mapa_perceptual_3D,
x = coordenadas_colunas[,1],
y = coordenadas_colunas[,2],
z = coordenadas_colunas[,3],
mode = "text",
type="scatter3d",
text = rownames(coordenadas_colunas),
textfont = list(color = "#287C8EFF"),
showlegend = FALSE)
# Inserindo o nome dos eixos (Dimensão 1, Dimensão 2 e Dimensão 3)
mapa_perceptual_3D <- layout(mapa_perceptual_3D,
scene = list(xaxis = list(title = colnames(coordenadas_linhas)[1]),
yaxis = list(title = colnames(coordenadas_linhas)[2]),
zaxis = list(title = colnames(coordenadas_linhas)[3]),
aspectmode = "data"),
margin = list(l = 0, r = 0, b = 0, t = 0))
mapa_perceptual_3D
mapa_perceptual_3D
summary(epis)
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
head(epis)
epis$n.pedido <- as.character(epis$n.pedido)
epis$unidade  <- as.numeric(epis$unidade)
epis$quantidade <- as.numeric(epis$quantidade)
epis$requisitante <- as.factor(epis$requisitante)
epis$status <- as.factor(epis$status)
epis$data.saida <- as.Date.character(epis$data.saida,format = c("%d/%m/%Y"))
summary(epis)
epis <- read.csv('distribuicao_epi.csv',header = T,sep=";")
head(epis)
epis$n.pedido <- as.character(epis$n.pedido)
epis$quantidade <- as.numeric(epis$quantidade)
epis$material <- as.factor(epis$material)
epis$requisitante <- as.factor(epis$requisitante)
epis$status <- as.factor(epis$status)
epis$data.saida <- as.Date.character(epis$data.saida,format = c("%d/%m/%Y"))
summary(epis)
